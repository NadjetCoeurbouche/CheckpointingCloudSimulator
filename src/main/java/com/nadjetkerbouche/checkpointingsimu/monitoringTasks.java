package com.nadjetkerbouche.checkpointingsimu;

import static com.nadjetkerbouche.checkpointingsimu.Final_List.finalVmsList;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nadjet KERBOUCHE
 */
public class monitoringTasks extends javax.swing.JFrame {

    int progress;
    int lastCheckpoint;
       int sla_ID;
    int vm_ID;
    String response_time_expected;
   String checkpoint_interval;
Final_List final_list_object = new Final_List();

    /**
     * Creates new form monitoringTasks
     */
    public monitoringTasks() throws InterruptedException {
        initComponents();

       exeTable();
    }

    public void exeTable(){
     
    DefaultTableModel exeModel = (DefaultTableModel)exeTable.getModel();
    Object data [] = new Object [finalVmsList.size()];
   
        for (int i = 0; i < finalVmsList.size(); i++) {
  response_time_expected = final_list_object.convertTime(finalVmsList.get(i).responseTimeExpected);
    checkpoint_interval = final_list_object.convertTime(finalVmsList.get(i).interval);
data[0] = finalVmsList.get(i).slaID;
data[1] = finalVmsList.get(i).vmID;
data[2] = checkpoint_interval;
data[3] = response_time_expected;


 exeModel.addRow(data);
}
     }
 
    public void timeDifference (String time1, String time2 ) throws ParseException{
    

SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss");
Date date1 = format.parse(time1);
Date date2 = format.parse(time2);
long differance = date2.getTime() - date1.getTime(); 
    }
    
       
    public String updateInterval(String startingTime){
        
            DefaultTableModel exeModel = (DefaultTableModel)exeTable.getModel();
             SimpleDateFormat df = new SimpleDateFormat("HH:mm:ss");
   
            Object data [] = new Object [finalVmsList.size()];   
            float interval = finalVmsList.get(2).interval;
           String intervalString =  final_list_object.convertTime(interval);
         //String newInterval = df.format(intervalString);
          
     exeModel.setValueAt(intervalString,2, 2);
 
      return intervalString = intervalString + intervalString  ;
       
}
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        exeTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        timerLabel = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        FailurePercentqge = new javax.swing.JTextField();
        faultOccurrenceTF1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(187, 225, 250));

        exeTable.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        exeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Task ID", "VM ID", "Last checkpoint", "Time Left", "State"
            }
        ));
        exeTable.setGridColor(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(exeTable);

        jPanel1.setBackground(new java.awt.Color(187, 225, 250));

        jButton1.setText("Run tasks");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Failure percentage: ");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Failure occurence:");

        timerLabel.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        timerLabel.setText(" 00:00:00");

        jButton2.setText("Stop timer");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        FailurePercentqge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FailurePercentqgeActionPerformed(evt);
            }
        });

        faultOccurrenceTF1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                faultOccurrenceTF1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 113, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FailurePercentqge, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(faultOccurrenceTF1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jButton1)
                .addGap(31, 31, 31)
                .addComponent(timerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(30, 30, 30))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(FailurePercentqge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(faultOccurrenceTF1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(68, 68, 68)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(timerLabel))
                    .addComponent(jButton2))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setText("Monitoring");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(172, 172, 172)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 687, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel3)))
                .addContainerGap(126, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel3)
                .addGap(17, 17, 17)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(166, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    timer.start();
    t1.start();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
            timer.stop();
            
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void FailurePercentqgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FailurePercentqgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FailurePercentqgeActionPerformed

    private void faultOccurrenceTF1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_faultOccurrenceTF1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_faultOccurrenceTF1ActionPerformed

    
    
    
    
    long startingRunTime = 0; //400 seconds
    float timeLeft = finalVmsList.get(1).responseTimeExpected;
    
    public String fill_interval(float interval) throws InterruptedException{
             //    

         String intervalString = final_list_object.convertTime(interval);
        return intervalString;


    }   
    float interval = finalVmsList.get(2).interval;

    // Thread to for checking latest checkpoint
    Thread t1 = new Thread(new Runnable() {
    @Override
    public void run() {
            DefaultTableModel exeModel = (DefaultTableModel)exeTable.getModel();

        try {          
            for(int i =0; i<5; i++){
            exeModel.setValueAt(fill_interval(interval), 2, 2); 
            t1.sleep((long)(finalVmsList.get(2).interval*1000));
                interval = interval + interval ;
            }
        } catch (InterruptedException ex) {
            Logger.getLogger(monitoringTasks.class.getName()).log(Level.SEVERE, null, ex);
        } // code goes here.
}
});  
    // Global timer action
ActionListener counter = new ActionListener()
{
    public void actionPerformed(ActionEvent e)
{              
    DefaultTableModel exeModel = (DefaultTableModel)exeTable.getModel();

        startingRunTime += 1000;
        timeLeft -= 1;
        SimpleDateFormat df = new SimpleDateFormat("HH:mm:ss");
        String st =  df.format(startingRunTime);
        String tl = final_list_object.convertTime(timeLeft);
        
 timerLabel.setText(st);
        try {
            exeModel.setValueAt(fill_interval(timeLeft), 1, 3);
        } catch (InterruptedException ex) {
            Logger.getLogger(monitoringTasks.class.getName()).log(Level.SEVERE, null, ex);
        }

  if(timeLeft <= 0)
        {
            timer.stop();
        }
     
     
        if(startingRunTime >= 400000)
        {
            timer.stop();
        }
    }
};       
Timer timer = new Timer(1000,counter);
 
   
public void fault_tolerance(){


    
    
    
    
    
    
    
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField FailurePercentqge;
    private javax.swing.JTable exeTable;
    private javax.swing.JTextField faultOccurrenceTF1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel timerLabel;
    // End of variables declaration//GEN-END:variables
}