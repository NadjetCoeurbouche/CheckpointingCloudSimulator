package com.nadjetkerbouche.checkpointingsimu;

import static com.nadjetkerbouche.checkpointingsimu.Final_List.finalVmsList;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import javax.swing.DefaultListModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nadjet KERBOUCHE
 */
public class BestVmsList extends javax.swing.JFrame {

    /**
     * Creates new form BestVmsList
     */
    public BestVmsList() {
        initComponents();
        tasks_list();
        fill_table(0);

    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        bestVMsTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        tasksList = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("jRadioButtonMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bestVMsTable.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        bestVMsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ranking", "vm ID", "Response time", "Deadline", "Failure Percentage", "status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bestVMsTable.setGridColor(new java.awt.Color(255, 255, 255));
        bestVMsTable.setSelectionBackground(new java.awt.Color(102, 204, 255));
        jScrollPane1.setViewportView(bestVMsTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 100, 920, 480));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 40, -1, -1));

        jButton2.setText("Generate Final assignment list");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 600, 290, 30));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setText("Tasks List");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        tasksList.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        tasksList.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        tasksList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tasksList.setSelectionBackground(new java.awt.Color(204, 255, 204));
        tasksList.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tasksList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tasksListMousePressed(evt);
            }
        });
        jScrollPane4.setViewportView(tasksList);

        jScrollPane3.setViewportView(jScrollPane4);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 170, 490));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setText("Best Virtual Machines List");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 60, -1, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1160, 680));

        pack();
    }// </editor-fold>//GEN-END:initComponents
 VM_SLA_data_UI vm_sla = new  VM_SLA_data_UI();
 
    int ranking;
    int vmID;
    float responseTimeExpected ;
    float faultPercentage ;
    float penaltyPercentage1;
    float penaltyPercentage2 ;
    float penaltyPercentage3;
    float total_penalty_cost;
    String status;
    public static ArrayList<BestVMs> bestVmsList = null;
    
    
 public String toString() {
        return " "+ ranking + "\t" + vmID + "\t" + responseTimeExpected + "\t" + 
                faultPercentage +  "\t" + penaltyPercentage1 + "\t" 
                + penaltyPercentage2 + "\t" + penaltyPercentage3 + "\t"
                + total_penalty_cost + "\t" + status;
    }
 
    
public void tasks_list(){
    DefaultListModel list_model = new DefaultListModel();

    // creating button for each task
   for(int i =0; i < vm_sla.slaList.size(); i++){
 
      //ArrayList to JList (tasks List)  
     list_model.addElement(vm_sla.slaList.get(i).slaID);
  }
  tasksList.setModel(list_model);
}

// sorting Best Vms List by response time and failure percentage
   public static void sort(ArrayList<BestVMs> list) {
   
        list.sort(new Comparator<BestVMs>() {
            @Override
            public int compare(BestVMs o1, BestVMs o2) {
                Float t1 = Float.valueOf(o1.responseTimeExpected);
                Float t2 = Float.valueOf(o2.responseTimeExpected);
                Float t3 = Float.valueOf(o1.faultPercentage);
                Float t4 = Float.valueOf(o2.faultPercentage);
                int result;
                result = (int)(t1 - t2);
                System.out.println(" t1 " + result );
                if(result == 0){
                result = t3.compareTo(t4);
            }
              return  result ;
                
            }
        });
    }
            float meanpenalty_cost;        

   int deadline;
    public ArrayList<BestVMs> fill_table(int selectedTask ){
    int insCount = vm_sla.slaList.get(selectedTask).instructionCount;
    
int price;
    bestVmsList = new ArrayList<BestVMs>();
   
    DefaultTableModel vmsModel = (DefaultTableModel)bestVMsTable.getModel();
    Object data [] = new Object [9];            
                
    for (int i =0; i < vm_sla.vmList.size(); i ++){
    
        vmID = vm_sla.vmList.get(i).vmID;
        responseTimeExpected = (float) insCount / (float) vm_sla.vmList.get(i).computeCapacity;
        faultPercentage = vm_sla.vmList.get(i).faultPercentage;
        penaltyPercentage1 = (float) vm_sla.slaList.get(selectedTask).price  * (float)vm_sla.slaList.get(selectedTask).penaltyPercentage1;
        penaltyPercentage2 = (float)vm_sla.slaList.get(selectedTask).price  * (float) vm_sla.slaList.get(selectedTask).penaltyPercentage2;
        penaltyPercentage3 = (float) vm_sla.slaList.get(selectedTask).price  * (float) vm_sla.slaList.get(selectedTask).penaltyPercentage3;
        deadline = vm_sla.slaList.get(selectedTask).deadline;
        price =  vm_sla.slaList.get(selectedTask).price;
       
float delay1 = (float) (0.1 * deadline) + deadline;
float delay2 = (float) (0.25 * deadline) + deadline;
float delay3 = (float) (0.50 * deadline) + deadline;

       if(deadline >= responseTimeExpected){
    meanpenalty_cost = ((penaltyPercentage1  + penaltyPercentage2 + penaltyPercentage3) /3) * price;    
        status = "no penalty";
       }
else {
    if (responseTimeExpected > deadline &&  responseTimeExpected <= delay1){
    meanpenalty_cost = ((penaltyPercentage1 + penaltyPercentage1 + penaltyPercentage2 + penaltyPercentage3) /4) * price;
        status = "penalty confirmed case 1";

    }
    else if (responseTimeExpected > delay1 &&  responseTimeExpected <= delay2) {
            meanpenalty_cost = ((penaltyPercentage1 + penaltyPercentage2 + penaltyPercentage2 + penaltyPercentage3) /4) * price;
        status = "penalty confirmed case 2";



    }
    else{
              meanpenalty_cost = ((penaltyPercentage1 + penaltyPercentage3 + penaltyPercentage2 + penaltyPercentage3) /4) * price;
        status = "penalty confirmed case 3";


    }
       }
  
        BestVMs firstList = new BestVMs(vmID, responseTimeExpected,deadline, faultPercentage, penaltyPercentage1, 
           penaltyPercentage2, penaltyPercentage3, meanpenalty_cost, status);

        bestVmsList.add(firstList);

        Collections.sort(bestVmsList);

}
   for (int i =0; i < vm_sla.vmList.size(); i ++){
    
 data[0] = i;
 data[1] = bestVmsList.get(i).vmID;
 data[2] = bestVmsList.get(i).responseTimeExpected;
 data[3] = bestVmsList.get(i).deadline;
 data[4] = bestVmsList.get(i).faultPercentage;

 data[5] = bestVmsList.get(i).status;

   vmsModel.addRow(data);

   } 
   return bestVmsList;
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        new Final_List().setVisible(true); 

    }//GEN-LAST:event_jButton2ActionPerformed

    private void tasksListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tasksListMousePressed

        DefaultTableModel vmsModel = (DefaultTableModel)bestVMsTable.getModel();

        // every time I click on the task ID the table have to be cleared from previous data
        vmsModel.setRowCount(0);

        int index = tasksList.getSelectedIndex();

        Object taskID = tasksList.getSelectedValue();

        Integer selectedTask = Integer.parseInt(taskID.toString());

        fill_table(index);

    }//GEN-LAST:event_tasksListMousePressed

     

       
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable bestVMsTable;
    private javax.swing.JButton jButton2;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JList<String> tasksList;
    // End of variables declaration//GEN-END:variables


  

  
}
