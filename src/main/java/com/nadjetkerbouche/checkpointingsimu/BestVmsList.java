package com.nadjetkerbouche.checkpointingsimu;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import javax.swing.DefaultListModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nadjet KERBOUCHE
 */
public class BestVmsList extends javax.swing.JFrame {

    /**
     * Creates new form BestVmsList
     */
    public BestVmsList() {
        initComponents();
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        bestVMsTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tasksList = new javax.swing.JList<>();
        jButton2 = new javax.swing.JButton();

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("jRadioButtonMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bestVMsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ranking", "vm ID", "Response time", "Failure Percentage", "10% ", "25%", "50%", "Total Penalty Cost"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(bestVMsTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 80, 810, 440));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 40, -1, -1));

        jButton1.setText("Show tasks");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, -1, -1));

        tasksList.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        tasksList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tasksList.setSelectionBackground(new java.awt.Color(204, 255, 204));
        tasksList.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tasksList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tasksListMousePressed(evt);
            }
        });
        jScrollPane4.setViewportView(tasksList);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 250, 590));

        jButton2.setText("Generate Final assignment list");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 540, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents
 VM_SLA_data_UI vm_sla = new  VM_SLA_data_UI();
 
   int ranking;
   int vmID;
    float responseTimeExpected ;
    float faultPercentage ;
    float penaltyPercentage1;
    float penaltyPercentage2 ;
    float penaltyPercentage3;
   float total_penalty_cost;
public static ArrayList<BestVMs> bestVmsList = null;
 public String toString() {
        return " "+ ranking + "\t" + vmID + "\t" + responseTimeExpected + "\t" + faultPercentage +  "\t" + penaltyPercentage1 + "\t" + penaltyPercentage2 + "\t" + penaltyPercentage3 + "\t" + total_penalty_cost;
     
    }
 
    
public void tasks_list(){

    DefaultListModel list_model = new DefaultListModel();

// creating button for each task
 
  for(int i =0; i < vm_sla.slaList.size(); i++){
    
    
      //ArrayList to JList (tasks List)
    
     list_model.addElement(vm_sla.slaList.get(i).slaID);
  }
  tasksList.setModel(list_model);
}


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
tasks_list();
        // TODO add your handling code here:
         
    }//GEN-LAST:event_jButton1ActionPerformed

   public static void sort(ArrayList<BestVMs> list) {
   
        list.sort(new Comparator<BestVMs>() {
            @Override
            public int compare(BestVMs o1, BestVMs o2) {
                Float t1 = Float.valueOf(o1.responseTimeExpected);
                Float t2 = Float.valueOf(o2.responseTimeExpected);
              return  t1.compareTo(t2);
                
            }
        });
    }
    public ArrayList<BestVMs> fill_table(int selectedTask ){
    int insCount;
    
   

    bestVmsList = new ArrayList<BestVMs>();
    

            insCount = vm_sla.slaList.get(selectedTask).instructionCount;
        System.out.println("task id filltable " + selectedTask );

    DefaultTableModel vmsModel = (DefaultTableModel)bestVMsTable.getModel();
    Object data [] = new Object [8];            
                
    for (int i =0; i < vm_sla.vmList.size(); i ++){
    
        vmID = vm_sla.vmList.get(i).vmID;
        responseTimeExpected = (float) insCount / (float) vm_sla.vmList.get(i).computeCapacity;
        faultPercentage = vm_sla.vmList.get(i).faultPercentage;
        penaltyPercentage1 = (float) vm_sla.slaList.get(selectedTask).price  * (float)vm_sla.slaList.get(selectedTask).penaltyPercentage1;
        penaltyPercentage2 = (float)vm_sla.slaList.get(selectedTask).price  * (float) vm_sla.slaList.get(selectedTask).penaltyPercentage2;
        penaltyPercentage3 = (float) vm_sla.slaList.get(selectedTask).price  * (float) vm_sla.slaList.get(selectedTask).penaltyPercentage3;
        total_penalty_cost = vm_sla.slaList.get(selectedTask).penaltyCost ;

        BestVMs firstList = new BestVMs(vmID, responseTimeExpected, faultPercentage, penaltyPercentage1, 
           penaltyPercentage2, penaltyPercentage3, total_penalty_cost);
bestVmsList.add(firstList);
Collections.sort(bestVmsList);

   // System.out.println("vms penaltyPercentage1 yaaay: " + bestVmsList.get(i) );


}
   for (int i =0; i < vm_sla.vmList.size(); i ++){
      
 data[0] = i;
 data[1] = bestVmsList.get(i).vmID;
 data[2] = bestVmsList.get(i).responseTimeExpected;
 data[3] = bestVmsList.get(i).faultPercentage;
 data[4] = bestVmsList.get(i).penaltyPercentage1;
 data[5] = bestVmsList.get(i).penaltyPercentage2;
 data[6] = bestVmsList.get(i).penaltyPercentage3;
 data[7] = bestVmsList.get(i).total_penalty_cost;
   vmsModel.addRow(data);

   } 
   return bestVmsList;
    }
    private void tasksListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tasksListMousePressed
                
                DefaultTableModel vmsModel = (DefaultTableModel)bestVMsTable.getModel();
              
                // every time I click on the task ID the table have to be cleared from previous data
                vmsModel.setRowCount(0);
                
        int index = tasksList.getSelectedIndex();

        Object taskID = tasksList.getSelectedValue();  
        
        Integer selectedTask = Integer.parseInt(taskID.toString());

                System.out.println("Selected Task ID   " + selectedTask );
        
                fill_table(index);
                
    }//GEN-LAST:event_tasksListMousePressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
new Final_List().setVisible(true);         // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

     
    /**
     * @param args the command line arguments
     */
  
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BestVmsList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BestVmsList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BestVmsList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BestVmsList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BestVmsList().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable bestVMsTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JList<String> tasksList;
    // End of variables declaration//GEN-END:variables


  

  
}
